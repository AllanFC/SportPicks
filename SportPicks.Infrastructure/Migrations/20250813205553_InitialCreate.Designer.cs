// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SportPicks.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250813205553_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Sports.Competitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlternateColor")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExternalSource")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ExternalId");

                    b.HasIndex("IsActive");

                    b.HasIndex("SportId");

                    b.HasIndex("ExternalSource", "ExternalId");

                    b.HasIndex("SportId", "Code")
                        .IsUnique();

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("Domain.Sports.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExternalSource")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Round")
                        .HasColumnType("integer");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Venue")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventDate");

                    b.HasIndex("ExternalId");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("Round");

                    b.HasIndex("SeasonId");

                    b.HasIndex("Week");

                    b.HasIndex("ExternalSource", "ExternalId");

                    b.HasIndex("SeasonId", "EventDate");

                    b.HasIndex("SeasonId", "Week");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Sports.EventCompetitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetitorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsHomeTeam")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventId", "CompetitorId")
                        .IsUnique();

                    b.ToTable("EventCompetitors");
                });

            modelBuilder.Entity("Domain.Sports.League", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InviteCode")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsPublic");

                    b.HasIndex("SportId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Domain.Sports.LeagueMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CorrectPicks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalPicks")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId");

                    b.HasIndex("LeagueId", "TotalPoints");

                    b.HasIndex("UserId", "LeagueId")
                        .IsUnique();

                    b.ToTable("LeagueMembers");
                });

            modelBuilder.Entity("Domain.Sports.Pick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("PickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PickedCompetitorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("PickedCompetitorId");

                    b.HasIndex("UserId");

                    b.HasIndex("LeagueId", "EventId");

                    b.HasIndex("UserId", "LeagueId", "EventId")
                        .IsUnique();

                    b.ToTable("Picks");
                });

            modelBuilder.Entity("Domain.Sports.RankedPick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("PickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "LeagueId", "EventId")
                        .IsUnique();

                    b.ToTable("RankedPicks");
                });

            modelBuilder.Entity("Domain.Sports.RankedPickDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ActualPosition")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompetitorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("PredictedPosition")
                        .HasColumnType("integer");

                    b.Property<Guid>("RankedPickId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("RankedPickId");

                    b.HasIndex("RankedPickId", "CompetitorId")
                        .IsUnique();

                    b.HasIndex("RankedPickId", "PredictedPosition");

                    b.ToTable("RankedPickDetails");
                });

            modelBuilder.Entity("Domain.Sports.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("SportId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Year");

                    b.HasIndex("SportId", "Year");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Domain.Sports.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Provider");

                    b.HasIndex("UserRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Sports.Competitor", b =>
                {
                    b.HasOne("Domain.Sports.Sport", "Sport")
                        .WithMany("Competitors")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Competitors_Sport_SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Domain.Sports.Event", b =>
                {
                    b.HasOne("Domain.Sports.Season", "Season")
                        .WithMany("Events")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Events_Season_SeasonId");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Sports.EventCompetitor", b =>
                {
                    b.HasOne("Domain.Sports.Competitor", "Competitor")
                        .WithMany("EventCompetitors")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventCompetitors_Competitor_CompetitorId");

                    b.HasOne("Domain.Sports.Event", "Event")
                        .WithMany("EventCompetitors")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventCompetitors_Event_EventId");

                    b.Navigation("Competitor");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Sports.League", b =>
                {
                    b.HasOne("Domain.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Leagues_User_CreatedByUserId");

                    b.HasOne("Domain.Sports.Sport", "Sport")
                        .WithMany("Leagues")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Leagues_Sport_SportId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Domain.Sports.LeagueMember", b =>
                {
                    b.HasOne("Domain.Sports.League", "League")
                        .WithMany("LeagueMembers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeagueMembers_League_LeagueId");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeagueMembers_User_UserId");

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Sports.Pick", b =>
                {
                    b.HasOne("Domain.Sports.Event", "Event")
                        .WithMany("Picks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Picks_Event_EventId");

                    b.HasOne("Domain.Sports.League", "League")
                        .WithMany("Picks")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Picks_League_LeagueId");

                    b.HasOne("Domain.Sports.Competitor", "PickedCompetitor")
                        .WithMany("Picks")
                        .HasForeignKey("PickedCompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Picks_Competitor_PickedCompetitorId");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Picks_User_UserId");

                    b.Navigation("Event");

                    b.Navigation("League");

                    b.Navigation("PickedCompetitor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Sports.RankedPick", b =>
                {
                    b.HasOne("Domain.Sports.Event", "Event")
                        .WithMany("RankedPicks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RankedPicks_Event_EventId");

                    b.HasOne("Domain.Sports.League", "League")
                        .WithMany("RankedPicks")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RankedPicks_League_LeagueId");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RankedPicks_User_UserId");

                    b.Navigation("Event");

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Sports.RankedPickDetail", b =>
                {
                    b.HasOne("Domain.Sports.Competitor", "Competitor")
                        .WithMany("RankedPickDetails")
                        .HasForeignKey("CompetitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RankedPickDetails_Competitor_CompetitorId");

                    b.HasOne("Domain.Sports.RankedPick", "RankedPick")
                        .WithMany("RankedPickDetails")
                        .HasForeignKey("RankedPickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RankedPickDetails_RankedPick_RankedPickId");

                    b.Navigation("Competitor");

                    b.Navigation("RankedPick");
                });

            modelBuilder.Entity("Domain.Sports.Season", b =>
                {
                    b.HasOne("Domain.Sports.Sport", "Sport")
                        .WithMany("Seasons")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Seasons_Sport_SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Domain.Sports.Competitor", b =>
                {
                    b.Navigation("EventCompetitors");

                    b.Navigation("Picks");

                    b.Navigation("RankedPickDetails");
                });

            modelBuilder.Entity("Domain.Sports.Event", b =>
                {
                    b.Navigation("EventCompetitors");

                    b.Navigation("Picks");

                    b.Navigation("RankedPicks");
                });

            modelBuilder.Entity("Domain.Sports.League", b =>
                {
                    b.Navigation("LeagueMembers");

                    b.Navigation("Picks");

                    b.Navigation("RankedPicks");
                });

            modelBuilder.Entity("Domain.Sports.RankedPick", b =>
                {
                    b.Navigation("RankedPickDetails");
                });

            modelBuilder.Entity("Domain.Sports.Season", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Sports.Sport", b =>
                {
                    b.Navigation("Competitors");

                    b.Navigation("Leagues");

                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
